#!/bin/bash
# This script contains password/salt generating functions.
################################################################################

################################################################################
# Generate random strings using /dev/urandom.
#
# A keyspace is defined by passing the initial random output to tr - the keyspace
# could be overtly defined e.g. 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~'.
# The [:print:] option returns printable characters (including spaces), which is
# probably OK for the purposes of WordPress salt generation.
#
# NOTE: dotenv values containing spaces must be surrounded by quotes.
#
# For a description of POSIX v=character classes, see:
# http://www.regular-expressions.info/posixbrackets.html. For a mapping of ASCII
# characters, see: http://www.asciitable.com/.#
################################################################################
function custom_password() {
    # Default character set
    CHAR="[:graph:]"
    # Default password length
    PWLEN=10

    # If only one parameter is available (password length)
    if [ $# -eq 1 ]
    then
        PWLEN=$1
    fi

    # If two parameters are available (pw length and charset)
    if [ $# -eq 2 ]
    then
        PWLEN=$1
        case $2 in
            "print")
            # all printable POSIX characters, including space characters
            CHAR="[:print:]"
            ;;
            "lower")
            # only lowercase characters
            CHAR="[:lower:]"
            ;;
            "upper")
            # only uppercase characters
            CHAR="[:upper:]"
            ;;
            "alpha")
            # lower and uppercase charaters
            CHAR="[:alpha:]"
            ;;
            "digit")
            # only digits
            CHAR="[:digit:]"
            ;;
            "alnum")
            # lower and uppercase characters and numbers
            CHAR="[:alnum:]"
            ;;
            "special")
            # lower and uppercase chars, digits and special chars, NO SPACE CHARACTERS
            CHAR="[:graph:]"
            ;;
            *)
            echo "invalid charset"
            ;;
        esac
    fi

    password=$(head /dev/urandom | tr -cd "$CHAR" | head -c $PWLEN)
    echo $password
}

################################################################################
# Salts for the dotenv format must be wrapped in '' if they contain a
# space character.
################################################################################
function conditionally_wrap_string() {
    local STR=$1

    # Does the string contain a space character?
    if [[ $1 == *" "* ]]
    then
        STR=\'{$1}\'
    fi
    echo "$STR"
}

################################################################################
# Return a Random string suitable for inclusion as a WordPress salt in
# the dotenv format required by Bedrock.
################################################################################
function random_salt() {
    local STR="$(custom_password 64 alnum)"
    conditionally_wrap_string $STR
}

################################################################################
# MariaDB doesn't like the '\' character.
# Because of this, and to be on the safe side, the random password for
# MySQL/MariaDB should be 'alnum' - alphanumeric caracters only.
################################################################################
function random_password() {
    local NUMCHARS=${1:-32}
    local TYPE=${2:-special}
    custom_password $NUMCHARS $TYPE
}
